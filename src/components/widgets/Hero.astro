---
import Button from '~/components/ui/Button.astro';
import HeroImage from '~/components/widgets/HeroImage.astro';
import type { ImageMetadata } from 'astro';
import type { CallToAction } from '~/types';

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  content?: string;
  image?: ImageMetadata;
  autoHeight?: boolean;
  actions?: string | CallToAction[];
}

const {
  id,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image,
} = Astro.props;
---

<section class="relative not-prose" {...id ? { id } : {}}>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="text-center max-w-5xl mx-auto py-20">
      {title && <h1 class="text-5xl md:text-6xl font-bold mb-4" set:html={title} />}
      <div class="max-w-3xl mx-auto">
        {subtitle && <p class="text-xl mb-5" set:html={subtitle} />}
        {
          actions && (
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
      {content && <Fragment set:html={content} />}
      {image && <HeroImage image={image} />}
    </div>
  </div>
</section>

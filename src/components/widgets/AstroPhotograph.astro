---
import type { Photography } from '~/types';
import type { GetImageResult } from 'astro';
import { getImage } from 'astro:assets';
interface Props {
  photography: Photography;
}
const { photography } = Astro.props;
const images = await Promise.all(
  photography.images.map(async (image) => {
    const maxWidth = image.width > 3840 ? 3840 : image.width;
    const data: GetImageResult = await getImage({
      src: image,
      widths: [640, 1200, maxWidth],
      sizes: `(max-width: 768px) 640px, (max-width: 1440px) 1200px, ${maxWidth}px`,
      width: maxWidth,
    });
    return {
      src: data.src,
      srcSet: data.srcSet.attribute,
      sizes: data.attributes.sizes,
      height: data.attributes.height,
      width: data.attributes.width,
      maxWidth: maxWidth,
    };
  })
);
---

<astro-photograph
  id="waterfall-container"
  data-images={JSON.stringify(images)}
  data-alt={photography.title}
  class="max-w-5xl flex mx-auto gap-3 px-3"
>
</astro-photograph>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';
  import { Image } from 'astro:assets';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '#waterfall-container',
    children: 'a',
    pswpModule: () => import('photoswipe'),
  });
  lightbox.init();

  class AstroPhotograph extends HTMLElement {
    connectedCallback() {
      // 从 data（数据）属性中读取消息。
      const data = this.dataset.images;
      const alt = this.dataset.alt;
      const images = data ? JSON.parse(data) : [];
      function createWaterfallLayout(columnsCount) {
        const container = document.getElementById('waterfall-container');
        if (!container) return;
        container.innerHTML = ''; // 清空之前的布局

        // 创建 columnsCount 数量的列
        const columns = Array.from({ length: columnsCount }, () => {
          const column = document.createElement('div');
          column.style.cssText = 'width: calc(100% / ' + columnsCount + ');';
          column.classList.add('h-max', 'flex', 'flex-col', 'gap-3');
          container.appendChild(column);
          return column;
        });

        // 分配图片到高度最小的列中
        images.forEach(({ src, srcSet, sizes, height, width, maxWidth }, index) => {
          const img = document.createElement('img');
          img.src = src;
          img.alt = `${alt}-${index}`;
          img.setAttribute('loading', 'lazy');
          img.setAttribute('decoding', 'async');
          img.classList.add('rounded-lg', 'sm:rounded-md');
          img.width = maxWidth; // 图片填充列宽度
          img.height = height;
          img.srcset = srcSet;
          img.sizes = sizes;
          // 计算图片的占位高度
          // const aspectRatio = height / width;
          // const displayHeight = (container.clientWidth / columnsCount) * aspectRatio;

          // 适配 waterfall-container
          const link = document.createElement('a');
          link.href = src; // 原图地址
          link.setAttribute('data-pswp-width', width);
          link.setAttribute('data-pswp-height', height);
          link.appendChild(img);

          // 找到当前高度最小的列
          const minHeightColumn = columns.reduce((minColumn, currentColumn) =>
            currentColumn.offsetHeight < minColumn.offsetHeight ? currentColumn : minColumn
          );

          // 设置图片的占位高度并添加到列中
          // img.style.height = `${displayHeight}px`;
          minHeightColumn.appendChild(link);
        });
      }

      // 初始化瀑布流布局，默认列数为 3
      function initializeWaterfall() {
        const columnsCount = window.innerWidth > 1024 ? 3 : window.innerWidth > 768 ? 2 : 1;
        createWaterfallLayout(columnsCount);
      }

      // 窗口大小调整时重新布局
      let lastWidth = window.innerWidth; // 记录上一个宽度
      window.addEventListener('resize', () => {
        const currentWidth = window.innerWidth;

        // 只有在宽度变化时才调用 initializeWaterfall
        if (currentWidth !== lastWidth) {
          initializeWaterfall();
          lastWidth = currentWidth; // 更新上一个宽度
        }
      });

      initializeWaterfall();
    }
  }

  customElements.define('astro-photograph', AstroPhotograph);
</script>
